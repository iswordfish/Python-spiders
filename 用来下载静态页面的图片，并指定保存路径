# -*- coding: utf-8 -*-
import urllib
import re
import time
import os

#显示下载进度
def schedule(a,b,c):
    '''''
    a:已经下载的数据块
    b:数据块的大小
    c:远程文件的大小
   '''
    per = 100.0 * a * b / c
    if per > 100 :
        per = 100   #数据由于一些原因可能会超过100%
    print '%.2f%%' % per

def getHtml(url):
    page = urllib.urlopen(url)
    html = page.read()
    return html

def downloadImg(html):
    reg = r'src="(.+?\.jpg)" pic_ext' #正则表达提取图片
    imgre = re.compile(reg)
    imglist = re.findall(imgre, html)
    #定义文件夹的名字
    t = time.localtime(time.time())
#将一个时间戳转换成一个当前时区的struct_time，如果seconds参数未输入，则以当前时间为转换标准
# time模块提供各种操作时间的函数
#说明：一般有两种表示时间的方式:
#第一种是时间戳的方式(相对于1970.1.1 00:00:00以秒计算的偏移量),时间戳是惟一的
#第二种以数组的形式表示即(struct_time),共有九个元素，分别表示，同一个时间戳的struct_time会因为时区不同而不同
#localtime(...)
#localtime([seconds]) -> (tm_year,tm_mon,tm_day,tm_hour,tm_min,tm_sec,tm_wday,tm_yday,tm_isdst)
#将一个时间戳转换成一个当前时区的struct_time，如果seconds参数未输入，则以当前时间为转换标准
#__getattribute__查找属性，并且转换为字符，拼接成构建文件夹名称

    foldername = str(t.__getattribute__("tm_year"))+"-"+str(t.__getattribute__("tm_mon"))+"-"+str(t.__getattribute__("tm_mday"))
    picpath = 'D:\\ImageDownload\\%s' % (foldername) #下载到的本地目录
    
    if not os.path.exists(picpath):   #路径不存在时创建一个
        os.makedirs(picpath)   
    x = 0
    for imgurl in imglist:
        target = picpath+'\\%s.jpg' % x
        print 'Downloading image to location: ' + target + '\nurl=' + imgurl
        image = urllib.urlretrieve(imgurl, target, schedule)
        print 'downloading picture %d' %x
        x += 1
    return image;

    
    
if __name__ == '__main__':
    print '''            *************************************
            **      Welcome to use Spider      **
            **      
                      check the picture URl      **
            **                                 **
            *************************************'''
    
    html = getHtml("http://tieba.baidu.com/p/2460150866")

    downloadImg(html)
    print "Download has finished."
